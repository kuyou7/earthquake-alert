# -*- coding: utf-8 -*-
"""earthquake alert.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fZsq-I-55RqiOXkAG5pCVEX4Gadtr4eF
"""

import requests
import xml.etree.ElementTree as ET
import time
from gtts import gTTS
import streamlit as st
import ipywidgets as widgets
from ipywidgets import interact
import streamlit as st
st.title ("地震速報アプリ")
st.write("ここに地震情報を表示します")

# 気象庁 地震速報フィードURL
JMA_EARTHQUAKE_FEED_URL = "https://www.data.jma.go.jp/developer/xml/feed/eqvol.xml"

# 直前に取得した速報タイトル（重複防止用）
last_earthquake_title = ""

# 行動指示辞書
actions = {
    1: "安全を確保してください。テーブルや丈夫な物の下に隠れてください。",
    2: "揺れが収まったら、避難ルートを確認し、落下物に注意してください。",
    3: "必要に応じて避難を開始してください。周囲の安全を確認してください。また、ガス栓を締め、必要であればブレーカーを落としてください。",
}

# 現在の行動ステップ
current_step = 1

# ボタンのクリックで次のステップに進む
def next_step(button):
    global current_step
    if current_step < 3:
        current_step += 1
    else:
        print("全ての行動指示が完了しました。")

    # 音声で行動指示を読み上げる
    action_message = actions.get(current_step, "行動指示がありません。")
    tts = gTTS(text=action_message, lang='ja')
    tts.save("action.mp3")

    # 音声再生
st.audio("action.mp3", autoplay=True)
    # 行動指示を表示
print(action_message)

# 地震速報を取得する関数
def fetch_latest_earthquake_info():
    try:
        response = requests.get(JMA_EARTHQUAKE_FEED_URL)
        response.raise_for_status()
        root = ET.fromstring(response.content)
        first_entry = root.find('channel/item')
        title = first_entry.find('title').text
        link = first_entry.find('link').text
        pubDate = first_entry.find('pubDate').text
        description = first_entry.find('description').text  # 震度やマグニチュードの情報が含まれる場合あり
        return title, link, pubDate, description
    except Exception as e:
        print(f"地震情報取得失敗: {e}")
        return None, None, None, None

# 地震速報を検知してユーザーにアラートを出す関数
def alert_user(title, link, description):
    global current_step

    # 最初の行動指示を読み上げ
    action_message = actions.get(current_step, "行動指示がありません。")
    tts = gTTS(text=action_message, lang='ja')
    tts.save("earthquake_alert.mp3")

    # 音声再生
    st.audio("earthquake_alert.mp3", autoplay=True)

    # 行動指示を表示
    print(f"地震速報: {title}")
    print(f"詳細: {description}")
    print(f"リンク: {link}")
    print(f"行動指示: {action_message}")

    # ボタンを表示して次の行動へ進む
    button = widgets.Button(description="次の行動")
    button.on_click(next_step)
    display(button)

# 地震速報を監視する関数
def monitor_earthquakes():
    global last_earthquake_title

    print("地震速報の監視を開始します...")

    while True:
        title, link, pubDate, description = fetch_latest_earthquake_info()

        if title and title != last_earthquake_title:
            if "震度速報" in title or "震源情報" in title:
                print(f"⚡地震発生検知！ {title}")
                alert_user(title, link, description)
                last_earthquake_title = title
            else:
                print(f"取得しましたが対象外: {title}")
        else:
            print("新しい地震速報なし")

        # 30秒ごとにチェック
        time.sleep(10)

if __name__ == "__main__":
    monitor_earthquakes()
