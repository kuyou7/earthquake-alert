# -*- coding: utf-8 -*-
"""earthquake alert.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fZsq-I-55RqiOXkAG5pCVEX4Gadtr4eF
"""

import requests
import xml.etree.ElementTree as ET
import time
from gtts import gTTS
import streamlit as st

st.title("地震速報アプリ")
st.write("ここに地震情報を表示します")

# 気象庁 地震速報フィードURL
JMA_EARTHQUAKE_FEED_URL = "https://www.data.jma.go.jp/developer/xml/feed/eqvol.xml"

# 行動指示辞書
actions = {
    1: "安全を確保してください。テーブルや丈夫な物の下に隠れてください。",
    2: "揺れが収まったら、避難ルートを確認し、落下物に注意してください。",
    3: "必要に応じて避難を開始してください。周囲の安全を確認してください。また、ガス栓を締め、必要であればブレーカーを落としてください。",
}

# 現在の行動ステップ
if 'current_step' not in st.session_state:
    st.session_state.current_step = 1

# 地震速報を取得する関数
def fetch_latest_earthquake_info():
    try:
        response = requests.get(JMA_EARTHQUAKE_FEED_URL)
        response.raise_for_status()
        root = ET.fromstring(response.content)
        first_entry = root.find('channel/item')
        title = first_entry.find('title').text if first_entry.find('title') is not None else None
        link = first_entry.find('link').text if first_entry.find('link') is not None else None
        pubDate = first_entry.find('pubDate').text if first_entry.find('pubDate') is not None else None
        description = first_entry.find('description').text if first_entry.find('description') is not None else None
        return title, link, pubDate, description
    except Exception as e:
        print(f"地震情報取得失敗: {e}")
        return None, None, None, None

# ボタンのクリックで次のステップに進む
def next_step():
    if st.session_state.current_step < 3:
        st.session_state.current_step += 1
    else:
        print("全ての行動指示が完了しました。")

    # 音声で行動指示を読み上げる
    action_message = actions.get(st.session_state.current_step, "行動指示がありません。")
    tts = gTTS(text=action_message, lang='ja')
    tts.save("action.mp3")

    # 音声再生
    st.audio("action.mp3", autoplay=True)
    # 行動指示を表示
    st.write(action_message)

# 地震速報を検知してユーザーにアラートを出す関数
def alert_user(title, link, description):
    # 最初の行動指示を読み上げ
    action_message = actions.get(st.session_state.current_step, "行動指示がありません。")
    tts = gTTS(text=action_message, lang='ja')
    tts.save("earthquake_alert.mp3")

    # 音声再生
    st.audio("earthquake_alert.mp3", autoplay=True)

    # 行動指示を表示
    st.write(f"地震速報: {title}")
    st.write(f"詳細: {description}")
    st.write(f"リンク: {link}")
    st.write(f"行動指示: {action_message}")

    # ボタンを表示して次の行動へ進む
    if st.button("次の行動"):
        next_step()

# 地震速報を監視する関数
def monitor_earthquakes():
    last_earthquake_title = st.session_state.get("last_earthquake_title", "")

    # 自動で地震情報を更新
    title, link, pubDate, description = fetch_latest_earthquake_info()

    if title:  # titleがNoneでない場合のみ処理を行う
        if title != last_earthquake_title:
            if "震度速報" in title or "震源情報" in title:
                st.write(f"⚡地震発生検知！ {title}")
                alert_user(title, link, description)
                st.session_state.last_earthquake_title = title
            else:
                st.write(f"取得しましたが対象外: {title}")
        else:
            st.write("新しい地震速報なし")
    else:
        st.write("地震情報を取得できませんでした")

    # 5秒ごとに再実行して自動更新
    time.sleep(5)
    st.experimental_rerun()

if __name__ == "__main__":
    monitor_earthquakes()
